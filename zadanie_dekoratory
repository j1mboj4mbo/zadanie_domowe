Skip to content
Search or jump to…
Pull requests
Issues
Marketplace
Explore
 
@j1mboj4mbo 
j1mboj4mbo
/
learning
Public
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
learning/kgawda/zadanie_dekoratory
@j1mboj4mbo
j1mboj4mbo Create zadanie_dekoratory
Latest commit 9d85686 2 hours ago
 History
 1 contributor
82 lines (67 sloc)  2.33 KB
   
import time

def main():

#     #1. dekorator liczący czas
    def timing(func):
        def wrapper():
            time_start = time.perf_counter()
            func()
            time_end = time.perf_counter()
            print("Wywołanie funkcji zajęło", time_end - time_start)
        return wrapper

    @timing
    def function():
        for x in range(10):
            print(x)

    function()
#
#     # 2. dekorator zbierający w listę
#
    class ListaObiektow:
        def __init__(self):
            self.lista = []

        def dodaj_do_listy(self, func):
            """ Dekorator, możliwy do użycia na obiekcie i funkcji.
            Nie modyfikuje obiektu/funkcji, a jedynie dodaje go do self.lista"""
            def inner(x):
                f = func(x)
                self.lista.append(f)
                return f
            return inner

    widoki = ListaObiektow()

    @widoki.dodaj_do_listy
    def home(request):
        return "Witaj na stronie"

    @widoki.dodaj_do_listy
    def greet(request):
        return "Witaj, twój request to " + str(request)

    home(None)
    greet(1)
    print(widoki.lista)
    # assert home in widoki.lista
    # assert greet in widoki.lista
    assert home(None) == 'Witaj na stronie'
    assert greet(1) == 'Witaj, twój request to 1'

    # # 3. fabryka fukncji-kluczy do sortowania

    l = ["Ala", "pies", "kot", "i tak dalej", "..."]
    # l.sort(key=len)  # to by posortowało po długości
    # l.sort(key=lambda x: x[1])  # to by posortowało po drugiej literze
    print(l)

    def fabryka_funkcji_pobierajacych_dana_litere(idx_litery, word=""):
        if word == "":
            try:
                return lambda x: x[idx_litery]
            except IndexError:
                return lambda x: x[-1]
        else:
            return word[idx_litery]

        # zadanie dodatkowe: jeśli jest za mało liter to podać ostatnią
        # DO PORUSZENIA: dlaczego except IndexError nie działa poprawnie?

    l.sort(key=fabryka_funkcji_pobierajacych_dana_litere(0))  # ma sortowac po pierszej literze
    print(l)
    l.sort(key=fabryka_funkcji_pobierajacych_dana_litere(1))  # ma sortowac po drugiej literze
    print(l)

    assert fabryka_funkcji_pobierajacych_dana_litere(0)("Abcd") == "A"
    assert fabryka_funkcji_pobierajacych_dana_litere(2)("Abcd") == "c"
#
if __name__ == '__main__':
    main()
© 2022 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
Loading complete
